/* Generated By:JJTree&JavaCC: Do not edit this line. Yal.java */
import java.io.*;
import java.util.Scanner;

public class Yal/*@bgen(jjtree)*/implements YalTreeConstants, YalConstants {/*@bgen(jjtree)*/
  protected static JJTYalState jjtree = new JJTYalState();
  /**
  * Main compiler runner
  */
  public static void main(String args []) throws ParseException, FileNotFoundException, Exception
  {
    Yal parser;
    String ficheiro=null;
        String folder ="Yal/";

        //testar se tem argumentos
        if (args.length>0)
        {
                if (args.length==1)
                {
                        File fx = new File(args[0]);
                        FileInputStream fis = new FileInputStream(fx);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    DataInputStream dis = new DataInputStream(bis);
                    parser=new Yal(dis);
                    ficheiro=args[0];
                } else
                {
                        System.out.println("Numero de argumentos errado");
                        return;
                }

        } else {
                //Listar directorio e ficheiros
            File dir = new File(folder);
            String[] child = dir.list();

            if (child == null) {
                        System.out.println("Pasta Yal vazia");
                        System.out.println("Colar Exemplo e Clicar Enter");
                        parser=new Yal(System.in);
                } else {
                    System.out.println("Ficheiros:");
                    for (int i=0; i<child.length; i++) {
                        System.out.println(i + "-" + child[i]);
                    }
                    System.out.println("Escolha o numero do ficheiro:");
                    Scanner scan = new Scanner(System.in);
                        int op=scan.nextInt();
                        if ( (op < 0) || (op >= child.length) ) return;

                        File fx = new File(folder + child[op]);
                    FileInputStream fis = new FileInputStream(fx);
                BufferedInputStream bis = new BufferedInputStream(fis);
                DataInputStream dis = new DataInputStream(bis);
                parser=new Yal(dis);
                ficheiro=child[op];
                }
        }

        SimpleNode n = parser.Root();
    try
    {
        System.out.println("\u005cnAST:");
        n.dump("");

        System.out.println("\u005cnANALISES LEXICAL E SINTACTICA CORRECTAS");
    }
    catch (Exception e)
    {
        System.out.println("ANALISES LEXICAL E SINTACTICA ERRADAS");
        System.out.println(e.getMessage());
    }

    SymbolTable sy = new SymbolTable();
    try
    {

                sy.createSymbolTable(n);

                System.out.println("\u005cnFEITO");
    } catch (Exception e)
    {
        System.out.println("\u005cnERRO");
    }

        if (!sy.Erro)
        {
                try
            {
                CodeGeneration codeGen = new CodeGeneration(ficheiro.substring(0,ficheiro.length()-4),n,sy);
                codeGen.initCodeGeneration();
            } catch (Exception e)
            {
                System.out.println("\u005cnERRO NA GERACAO DE CODIGO");
            }
        }
        else
        {
                System.out.println("NAO FOI POSSIVEL PROCEDER A GERACAO DE CODIGO");
        }
  }

/**
 * Root Node of the AST with Module, Declaration and Function Nodes
 */
  static final public SimpleNode Root() throws ParseException {
                   /*@bgen(jjtree) Root */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODULE);
      Module();
      jj_consume_token(LCHAVETA);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Declaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Function();
      }
      jj_consume_token(RCHAVETA);
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Module Node of the AST with the module name
 */
  static final public void Module() throws ParseException {
               /*@bgen(jjtree) Module */
               SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Declaration Node of the AST with the global declaration information 
 */
  static final public void Declaration() throws ParseException {
                    /*@bgen(jjtree) Declaration */
                    SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      ASElement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
                     jjtn000.setVal(t.image);  jjtn000.setLine(t.beginLine);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          jj_consume_token(31);
          ArraySize();
          jj_consume_token(32);
          break;
        case ADDSUB_OP:
        case INTEGER:
          Integer();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Integer Node of the AST identifying an integer
 */
  static final public void Integer() throws ParseException {
                /*@bgen(jjtree) Integer */
                SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t1,t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        t1 = jj_consume_token(ADDSUB_OP);
                        jjtn000.setVal(t1.image);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      t2 = jj_consume_token(INTEGER);
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                  jjtn000.addVal(t2.image); jjtn000.setLine(t2.beginLine);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Function Node of the AST with the function name, function return, parameter list and function body
 */
  static final public void Function() throws ParseException {
                 /*@bgen(jjtree) Function */
                 SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(FUNCTION);
      if (jj_2_1(2)) {
        FunctionReturn();
      } else {
        ;
      }
      t = jj_consume_token(ID);
               jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Varlist();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(LCHAVETA);
      Body();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Function Return Node of the AST with return information
 */
  static final public void FunctionReturn() throws ParseException {
                       /*@bgen(jjtree) FunctionReturn */
                       SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONRETURN);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
               jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        jj_consume_token(32);
                                                                                 jjtn000.addVal("[]");
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Parameter List Node of a function of the AST
 */
  static final public void Varlist() throws ParseException {
                /*@bgen(jjtree) Varlist */
  SimpleNode jjtn000 = new SimpleNode(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ASElement();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(VIRG);
        ASElement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Element Node of the AST being either scalar or access
 */
  static final public void ASElement() throws ParseException {
                           /*@bgen(jjtree) Element */
                           SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
               jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        jj_consume_token(32);
                                                                                 jjtn000.addVal("[]");
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Body Node of the AST with Statement Lists
 */
  static final public void Body() throws ParseException {
             /*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case WHILE:
        case IF:
        case ID:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        Stmt();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Statement List Node of the AST with while, if, call and assign nodes
 */
  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      While();
      break;
    case IF:
      If();
      break;
    case ADDSUB_OP:
    case ID:
      if (jj_2_2(3)) {
        Call();
        jj_consume_token(PVIRG);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case ID:
          Assign();
          jj_consume_token(PVIRG);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Assign Node of the AST with left and right variables information
 */
  static final public void Assign() throws ParseException {
               /*@bgen(jjtree) Assign */
               SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      ASAccess();
      t = jj_consume_token(ASSIGN);
                               jjtn000.setVal("="); jjtn000.setLine(t.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        ArraySize();
        jj_consume_token(32);
        break;
      case ADDSUB_OP:
      case INTEGER:
      case ID:
        Operation();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Operation Node of the AST with arithmetic and bitwise operations between terms
 */
  static final public void Operation() throws ParseException {
                  /*@bgen(jjtree) Operation */
                  SimpleNode jjtn000 = new SimpleNode(JJTOPERATION);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      Term();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARITH_OP:
          t = jj_consume_token(ARITH_OP);
                         jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
          break;
        case BITWISE_OP:
          t = jj_consume_token(BITWISE_OP);
                             jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
          break;
        case ADDSUB_OP:
          t = jj_consume_token(ADDSUB_OP);
                            jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Term();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if(jjtn000.val == null) {
                jjtn000.setVal("bypassnode");
                jjtn000.setBypass(true);
          }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * ArraySize Node of the AST with the value attributed to a size of an array
 */
  static final public void ArraySize() throws ParseException {
                  /*@bgen(jjtree) ArraySize */
                  SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t1,t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t1 = jj_consume_token(ID);
                  jjtn000.setVal(t1.image); jjtn000.setLine(t1.beginLine);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          jj_consume_token(33);
          t2 = jj_consume_token(SIZE);
                          jjtn000.addVal("." + t2.image);
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case INTEGER:
        t1 = jj_consume_token(INTEGER);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.setVal(t1.image); jjtn000.setLine(t1.beginLine);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Term Node of the AST witch can be an integer, function call or Access
 */
  static final public void Term() throws ParseException {
    if (jj_2_4(2)) {
      Integer();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
      case ID:
        if (jj_2_3(4)) {
          Call();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ADDSUB_OP:
          case ID:
            ASAccess();
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * Exprtest Node of the AST is the condition of the while and if nodes between two terms
 */
  static final public void Exprtest() throws ParseException {
                             /*@bgen(jjtree) Condition */
                             SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(LPAR);
      Term();
      t = jj_consume_token(RELA_OP);
                                  jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
      Term();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * While Node of the AST with the expression and body nodes
 */
  static final public void While() throws ParseException {
              /*@bgen(jjtree) While */
              SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(WHILE);
                  jjtn000.setLine(t.beginLine);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Body();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * If Node of the AST with the expression and body nodes
 */
  static final public void If() throws ParseException {
           /*@bgen(jjtree) If */
           SimpleNode jjtn000 = new SimpleNode(JJTIF);
           boolean jjtc000 = true;
           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IF);
               jjtn000.setLine(t.beginLine);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Body();
      jj_consume_token(RCHAVETA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(LCHAVETA);
        Body();
        jj_consume_token(RCHAVETA);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Call Node of the AST with the function name and parameters of the function call
 */
  static final public void Call() throws ParseException {
                   /*@bgen(jjtree) Call */
                   SimpleNode jjtn000 = new SimpleNode(JJTCALL);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t1,t2,t3;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        t1 = jj_consume_token(ADDSUB_OP);
                         jjtn000.setVal(t1.image);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      t2 = jj_consume_token(ID);
                 jjtn000.addVal(t2.image); jjtn000.setLine(t2.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        t3 = jj_consume_token(ID);
                     jjtn000.addVal("." + t3.image);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case ID:
      case STRING:
        ArgumentList();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Argument List Node of the AST with list of parameters of a function
 */
  static final public void ArgumentList() throws ParseException {
                     /*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_6;
        }
        jj_consume_token(VIRG);
        Argument();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Argument Node of the AST identifying the parameter of a function 
 */
  static final public void Argument() throws ParseException {
                 /*@bgen(jjtree) Argument */
                 SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Access Node of the AST being a variable with possible index or a method 
 */
  static final public void ASAccess() throws ParseException {
                         /*@bgen(jjtree) Access */
                         SimpleNode jjtn000 = new SimpleNode(JJTACCESS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t1,t2,t3;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        t1 = jj_consume_token(ADDSUB_OP);
                         jjtn000.setVal(t1.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      t2 = jj_consume_token(ID);
                 jjtn000.addVal(t2.image); jjtn000.setLine(t2.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        Index();
        jj_consume_token(32);
        break;
      default:
        jj_la1[27] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          jj_consume_token(33);
          t3 = jj_consume_token(SIZE);
                          jjtn000.addVal("." + t3.image);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
 * Index Node of the AST with the index identification of an array
 */
  static final public void Index() throws ParseException {
              /*@bgen(jjtree) Index */
              SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t1,t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t1 = jj_consume_token(ID);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.setVal(t1.image); jjtn000.setLine(t1.beginLine);
        break;
      case INTEGER:
        t2 = jj_consume_token(INTEGER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.setVal(t2.image); jjtn000.setLine(t2.beginLine);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(VIRG)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ADDSUB_OP)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public YalTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x800000,0x84000100,0x8000,0x100,0x8000000,0x80000000,0x80000,0x80000000,0x8003100,0x8000100,0x8003100,0x8c000100,0x700,0x700,0x0,0xc000000,0x8000100,0x8000100,0x4000,0x100,0x0,0x4c000000,0x80000,0x4c000000,0x100,0x0,0x80000000,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x2,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Yal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Yal(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new YalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Yal(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new YalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Yal(YalTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(YalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
