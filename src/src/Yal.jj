/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Yal.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = true;
  LOOKAHEAD=1;
}

PARSER_BEGIN(Yal)

import java.io.*;
import java.util.Scanner;

public class Yal/*@bgen(jjtree)*/implements YalTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTYalState jjtree = new JJTYalState();

/*@egen*/

  /**
  * Main compiler runner
  */
  public static void main(String args []) throws ParseException, FileNotFoundException, Exception
  {
    Yal parser;
    String ficheiro=null;
	String folder ="Yal/";

	//testar se tem argumentos
	if (args.length>0)	{
	  	if (args.length==1)	  	{
	  	  	File fx = new File(args[0]);
			FileInputStream fis = new FileInputStream(fx);
		    BufferedInputStream bis = new BufferedInputStream(fis);
		    DataInputStream dis = new DataInputStream(bis);
		    parser=new Yal(dis);
		    ficheiro=args[0];
	  	} else	  	{			System.out.println("Numero de argumentos errado");
			return;
	  	}
	  	
	} else {
	  	//Listar directorio e ficheiros
	    File dir = new File(folder);
	    String[] child = dir.list();
	    
	    if (child == null) {
			System.out.println("Pasta Yal vazia");
			System.out.println("Colar Exemplo e Clicar Enter");
			parser=new Yal(System.in);
		} else {
		    System.out.println("Ficheiros:");
		    for (int i=0; i<child.length; i++) {
		    	System.out.println(i + "-" + child[i]);
		    }
		    System.out.println("Escolha o numero do ficheiro:");
		    Scanner scan = new Scanner(System.in);
	   		int op=scan.nextInt();
	   		if ( (op < 0) || (op >= child.length) ) return;
	
	   		File fx = new File(folder + child[op]);
		    FileInputStream fis = new FileInputStream(fx);
	        BufferedInputStream bis = new BufferedInputStream(fis);
	        DataInputStream dis = new DataInputStream(bis);
	        parser=new Yal(dis);
	        ficheiro=child[op];
		}
	}
	SimpleNode n = parser.Root();
    try
    {
      	System.out.println("\nAST:");
      	n.dump("");

      	System.out.println("\nANALISES LEXICAL E SINTACTICA CORRECTAS");
    }
    catch (Exception e)
    {
      	System.out.println("ANALISES LEXICAL E SINTACTICA ERRADAS");
      	System.out.println(e.getMessage());
    }
    
    SymbolTable sy = new SymbolTable();
    try    {
        
		sy.createSymbolTable(n);
	
  		System.out.println("\nFEITO");    } catch (Exception e)    {
      	System.out.println("\nERRO");    }

	if (!sy.Erro)	{		try
	    {
	      	CodeGeneration codeGen = new CodeGeneration(ficheiro.substring(0,ficheiro.length()-4),n,sy);
	    	codeGen.initCodeGeneration();
	    } catch (Exception e)
	    {
	      	System.out.println("\nERRO NA GERACAO DE CODIGO");
	    }
	}
	else
	{		System.out.println("NAO FOI POSSIVEL PROCEDER A GERACAO DE CODIGO");
	}
  }
}

PARSER_END(Yal)

<DEFAULT> SKIP : {
	" "
	| "\t"
	| "\n"
	| "\r"
	| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
<DEFAULT> TOKEN : {
	<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
	| <ADDSUB_OP: "+" | "-">
	| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
	| <BITWISE_OP: "&" | "|" | "^">
	| <NOT_OP: "!">
	| <WHILE: "while">
	| <IF: "if">
	| <ELSE: "else">
	| <ASSIGN: "=">
	| <ASPA: "\"">
	| <LPAR: "(">
	| <RPAR: ")">
	| <VIRG: ",">
	| <PVIRG: ";">
	| <LCHAVETA: "{">
	| <RCHAVETA: "}">
	| <FUNCTION: "function">
	| <MODULE: "module">
	| <SIZE: "size">
}
<DEFAULT> TOKEN : {
	<INTEGER: (<DIGIT>)+>
	| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
	| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
	| <#DIGIT: ["0"-"9"]>
	| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

/**
 * Root Node of the AST with Module, Declaration and Function Nodes
 */
SimpleNode Root():{/*@bgen(jjtree) Root */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
        try {
/*@egen*/
  	<MODULE> Module() <LCHAVETA> (Declaration())* (Function())* <RCHAVETA>/*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                               }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Module Node of the AST with the module name
 */
void Module():{/*@bgen(jjtree) Module */
               SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Module */
        try {
/*@egen*/
	t=<ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Declaration Node of the AST with the global declaration information 
 */
void Declaration():{/*@bgen(jjtree) Declaration */
                    SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	ASElement()
	(
	  t=<ASSIGN>{jjtn000.setVal(t.image);  jjtn000.setLine(t.beginLine);}
	  ( ("[" ArraySize() "]") | Integer() )
	)? <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/**
 * Integer Node of the AST identifying an integer
 */
void Integer():{/*@bgen(jjtree) Integer */
                SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2;}
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	(t1=<ADDSUB_OP>{jjtn000.setVal(t1.image);})? t2=<INTEGER>/*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                 }
/*@egen*/{jjtn000.addVal(t2.image); jjtn000.setLine(t2.beginLine);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Function Node of the AST with the function name, function return, parameter list and function body
 */
void Function():{/*@bgen(jjtree) Function */
                 SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	<FUNCTION> (LOOKAHEAD(2) FunctionReturn())?
	t=<ID>{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);}
	<LPAR> ( Varlist() )? <RPAR>
	<LCHAVETA> Body() <RCHAVETA >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Function Return Node of the AST with return information
 */
void FunctionReturn():{/*@bgen(jjtree) FunctionReturn */
                       SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONRETURN);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FunctionReturn */
        try {
/*@egen*/
	t=<ID>{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);} ("[" "]" {jjtn000.addVal("[]");})? <ASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Parameter List Node of a function of the AST
 */
void Varlist():{/*@bgen(jjtree) Varlist */
  SimpleNode jjtn000 = new SimpleNode(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Varlist */
        try {
/*@egen*/
   	(ASElement()) ( <VIRG> (ASElement()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Element Node of the AST being either scalar or access
 */
void ASElement()         :{/*@bgen(jjtree) Element */
                           SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Element */
        try {
/*@egen*/
  	t=<ID>{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);} ("[" "]" {jjtn000.addVal("[]");})?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Body Node of the AST with Statement Lists
 */
void Body():{/*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Body */
        try {
/*@egen*/
	(Stmt())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}

/**
 * Statement List Node of the AST with while, if, call and assign nodes
 */
void Stmt()     :{}
{
  	While() 
 	| If()
 	| (LOOKAHEAD(3) (Call() <PVIRG>) | (Assign() <PVIRG>) )
}

/**
 * Assign Node of the AST with left and right variables information
 */
void Assign():{/*@bgen(jjtree) Assign */
               SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
  	ASAccess() t=<ASSIGN> {jjtn000.setVal("="); jjtn000.setLine(t.beginLine);}
  	(
  	  ("[" ArraySize() "]")
  	  | Operation()
  	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Operation Node of the AST with arithmetic and bitwise operations between terms
 */
void Operation():{/*@bgen(jjtree) Operation */
                  SimpleNode jjtn000 = new SimpleNode(JJTOPERATION);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Operation */
        try {
/*@egen*/
  	Term()
  	(  
  	  (
  	    t=<ARITH_OP>{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);}
  	    | t=<BITWISE_OP>{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);}
  	    | t=<ADDSUB_OP>{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);}
  	  )
	  Term()
 	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
 	{
 	  if(jjtn000.val == null) { 	  	jjtn000.setVal("bypassnode");
 	  	jjtn000.setBypass(true);
 	  }
 	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * ArraySize Node of the AST with the value attributed to a size of an array
 */
void ArraySize():{/*@bgen(jjtree) ArraySize */
                  SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2;}
{/*@bgen(jjtree) ArraySize */
        try {
/*@egen*/
   	(
   	  t1=<ID>{jjtn000.setVal(t1.image); jjtn000.setLine(t1.beginLine);}
   	  ( "." t2=<SIZE>{jjtn000.addVal("." + t2.image);} )?
   	)
   	| (t1=<INTEGER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.setVal(t1.image); jjtn000.setLine(t1.beginLine);})/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Term Node of the AST witch can be an integer, function call or Access
 */
void Term()      :{}
{
	(LOOKAHEAD(2) Integer() | (LOOKAHEAD(4) Call() | ASAccess() ) )
}

/**
 * Exprtest Node of the AST is the condition of the while and if nodes between two terms
 */
void Exprtest()            :{/*@bgen(jjtree) Condition */
                             SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Condition */
        try {
/*@egen*/
	<LPAR> Term() t=<RELA_OP>{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);} Term() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}

/**
 * While Node of the AST with the expression and body nodes
 */
void While():{/*@bgen(jjtree) While */
              SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	t=<WHILE>{jjtn000.setLine(t.beginLine);} Exprtest() <LCHAVETA> Body() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/**
 * If Node of the AST with the expression and body nodes
 */
void If():{/*@bgen(jjtree) If */
           SimpleNode jjtn000 = new SimpleNode(JJTIF);
           boolean jjtc000 = true;
           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	t=<IF>{jjtn000.setLine(t.beginLine);} Exprtest() <LCHAVETA> Body() <RCHAVETA>
	( <ELSE> <LCHAVETA>	Body() <RCHAVETA> )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //| ( <ELSE> If())
}

/**
 * Call Node of the AST with the function name and parameters of the function call
 */
void Call()      :{/*@bgen(jjtree) Call */
                   SimpleNode jjtn000 = new SimpleNode(JJTCALL);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2,t3;}
{/*@bgen(jjtree) Call */
        try {
/*@egen*/
  	((t1=<ADDSUB_OP>{jjtn000.setVal(t1.image);} )?)
  	(t2=<ID>{jjtn000.addVal(t2.image); jjtn000.setLine(t2.beginLine);}
  	("." t3=<ID>{jjtn000.addVal("." + t3.image);})? 
	<LPAR> (ArgumentList())? <RPAR>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/**
 * Argument List Node of the AST with list of parameters of a function
 */
void ArgumentList():{/*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
        try {
/*@egen*/
	Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/**
 * Argument Node of the AST identifying the parameter of a function 
 */
void Argument():{/*@bgen(jjtree) Argument */
                 SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
  	( t=<ID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);} |
  	t=<STRING>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);} |
  	t=<INTEGER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setVal(t.image); jjtn000.setLine(t.beginLine);} )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/**
 * Access Node of the AST being a variable with possible index or a method 
 */
void ASAccess()        :{/*@bgen(jjtree) Access */
                         SimpleNode jjtn000 = new SimpleNode(JJTACCESS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2,t3;}
{/*@bgen(jjtree) Access */
        try {
/*@egen*/
  	((t1=<ADDSUB_OP>{jjtn000.setVal(t1.image);} )?)
	(t2=<ID>{jjtn000.addVal(t2.image); jjtn000.setLine(t2.beginLine);}
	(
	  ( "[" Index() "]" ) |
	  ( "." t3=<SIZE>{jjtn000.addVal("." + t3.image);} )?
	))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Index Node of the AST with the index identification of an array
 */
void Index():{/*@bgen(jjtree) Index */
              SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2;}
{/*@bgen(jjtree) Index */
        try {
/*@egen*/
  	t1=<ID>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setVal(t1.image); jjtn000.setLine(t1.beginLine);}
  	| t2=<INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.setVal(t2.image); jjtn000.setLine(t2.beginLine);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
